
# This file was *autogenerated* from the file gravitational_experimentsFinal.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_1000 = Integer(1000); _sage_const_12345 = Integer(12345); _sage_const_100000 = Integer(100000)
import pandas as pd
import sys
import csv

#create the data (masked column name version)
set_random_seed(_sage_const_12345 )

myTime = _sage_const_5  #time for CONJECTURING PROGRAM

number_of_data_points = _sage_const_1000 

print "using {} random data points \n".format(number_of_data_points)

grav_constant = random() #randomly chosen gravitational constant

print "random gravitiational constant = {} \n".format(grav_constant)


trainData = []
for i in range(number_of_data_points):
    m1 = RR(randint(_sage_const_1 ,_sage_const_100000 ))
    m2 = RR(randint(_sage_const_1 ,_sage_const_100000 ))
    r = RR(randint(_sage_const_1 ,_sage_const_100000 ))
    #m1 = RR(randint(2,100))
    #m2 = RR(randint(2,100))
    #r = RR(randint(1,max(m1, m2)))
    F = RR(grav_constant*m1*m2/(r**_sage_const_2 ))

    trainData.append([F,m1,m2,r])
with open('gravityTrainData.csv', 'w') as writeFile:
    writer = csv.writer(writeFile)
    writer.writerows(trainData)
writeFile.close()

train_pair_df = pd.DataFrame(trainData, columns=['F', 'm1', 'm2', 'r'])

    
testData = []
for i in range(number_of_data_points):
    m1 = RR(randint(_sage_const_1 ,_sage_const_100000 ))
    m2 = RR(randint(_sage_const_1 ,_sage_const_100000 ))
    r = RR(randint(_sage_const_1 ,_sage_const_100000 ))
    F = RR(grav_constant*m1*m2/(r**_sage_const_2 ))

    testData.append([F,m1,m2,r])
with open('gravityTestData.csv', 'w') as writeFile:
    writer = csv.writer(writeFile)
    writer.writerows(testData)
writeFile.close()

test_pair_df = pd.DataFrame(testData, columns=['F', 'm1', 'm2', 'r'])

print "gravitational data loaded \n"

class Pair():
    def __init__(self, mydf, number):
        self.mydf = mydf
        self.name = "pair" + str(number)
        self.number = number #row number
    def force(self):
        return RDF(self.mydf.iloc[self.number]["F"])
    def mass1(self):
        return RDF(self.mydf.iloc[self.number]["m1"])
    def mass2(self):
        return RDF(self.mydf.iloc[self.number]["m2"])
    def distance(self):
        return RDF(self.mydf.iloc[self.number]["r"])

train_pairs = [Pair(train_pair_df, i) for i in range(len(train_pair_df))]

test_pairs = [Pair(test_pair_df, i) for i in range(len(test_pair_df))]

all_pairs = train_pairs + test_pairs

pair_invariants = [Pair.force,
                   Pair.mass1,
                   Pair.mass2,
                   Pair.distance]

print "Invariants defined! \n"
sys.stdout.flush()

print "Pairs loaded! \n"
sys.stdout.flush()

load("conjecturing.py") 

print "conjecturing loaded ... ready to conjecture! \n"
sys.stdout.flush()


use_operators =  { '-1', '+1', '*2', '/2', '^2', '-()', '1/', 'sqrt', 'ln', 'log10', 'exp', '10^', 'ceil', 'floor', 'abs', '+', '*', 'max', 'min', '-', '/', '^'}

inv_of_interest = pair_invariants.index(Pair.force)


print("Upper bound conjecturing")
sys.stdout.flush()

pair_above_conjs = conjecture(train_pairs, pair_invariants, inv_of_interest, operators=use_operators, debug=True, verbose=False, upperBound=True, time=myTime)

count = _sage_const_0 
for conj in pair_above_conjs:
    count += _sage_const_1 
    print (count, conj)

print("Lower bound conjecturing")
sys.stdout.flush()

pair_above_conjs = conjecture(train_pairs, pair_invariants, inv_of_interest, operators=use_operators, debug=True, verbose=False, upperBound=False, time=myTime)

count = _sage_const_0 
for conj in pair_above_conjs:
    count += _sage_const_1 
    print (count, conj)

